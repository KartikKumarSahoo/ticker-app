{"version":3,"sources":["utils.js","components/TickerTable.js","components/StockChart.js","constants.js","App.js","index.js"],"names":["timeSince","timestamp","date","Date","seconds","Math","floor","interval","TickerTable","props","error","_props$data","data","_props$onStockClick","onStockClick","react_default","a","createElement","className","Object","keys","length","map","name","_data$name","price","updatedAt","growth","key","title","onClick","e","concat","StockChart","values","stockName","onClose","prices","chartData","series","initialValue","finalValue","dist_default","options","showArea","axisX","showLabel","type","STOCKS_WS_URL","ERROR_MESSAGE","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showChart","stock","stopPropagation","setState","activeStock","closeChart","initWebSocket","window","socket","WebSocket","addEventListener","send","event","JSON","parse","forEach","_data","slicedToArray","toFixed","oldPrice","state","liveStocks","time","now","objectSpread","defineProperty","err","console","_ref2","_ref2$liveStocks","components_TickerTable","components_StockChart","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.3638cc02.chunk.js","sourcesContent":["export const timeSince = timestamp => {\n  const date = new Date(timestamp);\n  const seconds = Math.floor((new Date() - date) / 1000);\n\n  var interval = Math.floor(seconds / 31536000); // Interval in years\n  if (interval > 1) {\n    return '19 Dec 2019 12:30 PM';\n  }\n\n  interval = Math.floor(seconds / 86400); // Interval in days\n  if (interval > 2) {\n    return '19 Dec 12:30 PM';\n  }\n  if (interval > 1) {\n    return 'Yesterday 12:30 PM';\n  }\n\n  // interval = Math.floor(seconds / 3600); // Interval in hours\n  // if (interval > 1) {\n  //   return interval + \" hours\";\n  // }\n  \n  interval = Math.floor(seconds / 60); // Interval in minutes\n  if (interval > 30) {\n    return '12:30 PM';\n  }\n  if (interval > 1) {\n    return interval + ' minutes ago';\n  }\n  if (seconds > 5) {\n    return seconds + ' seconds ago';\n  }\n  if (seconds > 1) {\n    return 'a few seconds ago';\n  }\n  return 'now';\n}","import React from 'react';\nimport { timeSince } from '../utils';\nimport PropTypes from 'prop-types';\n\nfunction TickerTable(props) {\n  const { error, data = {}, onStockClick = () => {} } = props;\n\n  // Show error message when connection fails.\n  if (error) return <div className=\"error\">{error}</div>;\n\n  // Don't show anything till first message is received.\n  if (Object.keys(data).length === 0) return null;\n\n  return (\n    <table className=\"ticker-table-wrapper\">\n      <thead>\n        <tr>\n          <th className=\"name\">Ticker</th>\n          <th className=\"price\">Price</th>\n          <th className=\"time\">Last Updated</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(data).map(name => {\n          const { price, updatedAt, growth } = data[name];\n          return (\n            <tr className={growth ? '' : 'new'} key={name}>\n              <td\n                className=\"name link\"\n                title=\"Click to see this stock's history\"\n                onClick={e => onStockClick(name, e)}\n              >\n                {name}\n              </td>\n              <td className={`price ${growth || ''}`}>{price}</td>\n              <td className=\"time\">{timeSince(updatedAt)}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nTickerTable.propTypes = {\n  data: PropTypes.object.isRequired,\n  error: PropTypes.string,\n  onStockClick: PropTypes.func.isRequired,\n};\n\nexport default TickerTable;\n","import React from 'react';\nimport ChartistGraph from 'react-chartist';\nimport PropTypes from 'prop-types';\n\nfunction StockChart(props) {\n  const { values, stockName, onClose } = props;\n  if (!values) return null;\n\n  const prices = Object.values(values);\n  const chartData = { series: [prices] };\n  const initialValue = prices[0] || 0;\n  const finalValue = prices[prices.length - 1] || 0;\n  // console.log(initialValue, finalValue);\n\n  return (\n    <div\n      className={`sparkline-chart ${\n        finalValue > initialValue ? 'upward' : 'downward'\n      }`}\n    >\n      <h2>\n        History of <span className=\"stock-name\">{stockName}</span> Stock\n      </h2>\n      <span className=\"close\" onClick={onClose}>\n        &#10539;\n      </span>\n      <ChartistGraph\n        data={chartData}\n        options={{\n          showArea: true,\n          axisX: {\n            showLabel: false,\n          },\n        }}\n        type=\"Line\"\n      />\n    </div>\n  );\n}\n\nStockChart.propTypes = {\n  values: PropTypes.object.isRequired,\n  stockName: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default StockChart;\n","export const STOCKS_WS_URL = 'ws://stocks.mnet.website';\nexport const ERROR_MESSAGE = `Failed to connect \"${STOCKS_WS_URL}\"`;\n","import React from 'react';\nimport TickerTable from './components/TickerTable';\nimport StockChart from './components/StockChart';\nimport { STOCKS_WS_URL, ERROR_MESSAGE } from './constants';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      liveStocks: {},\n      activeStock: null,\n      error: null,\n    };\n    this.data = {}; // To keep all historical data.\n\n    this.initWebSocket();\n  }\n\n  showChart = (stock, e) => {\n    e.stopPropagation();\n    this.setState({ activeStock: stock });\n  };\n\n  closeChart = e => {\n    e.stopPropagation();\n    this.setState({ activeStock: null });\n  };\n\n  initWebSocket = () => {\n    if (!('WebSocket' in window)) return;\n\n    try {\n      const socket = new WebSocket(STOCKS_WS_URL);\n      // Connection opened\n      socket.addEventListener('open', () => {\n        socket.send('Hello Server!');\n      });\n\n      // Handle socket connection error\n      socket.addEventListener('error', () => {\n        this.setState({ error: ERROR_MESSAGE });\n      });\n\n      // Listen for messages\n      socket.addEventListener('message', event => {\n        // console.log('Message from server ', event.data);\n        JSON.parse(event.data).forEach(data => {\n          let [name, price] = data;\n          price = price.toFixed(2);\n          const { price: oldPrice } = this.state.liveStocks[name] || {};\n          const time = Date.now();\n\n          // Store data for future use.\n          this.data[name] = this.data[name] || {};\n          this.data[name][time] = price;\n\n          // Update state to show in the Stocks Table\n          this.setState({\n            liveStocks: {\n              ...this.state.liveStocks,\n              [name]: {\n                price: +price,\n                updatedAt: time,\n                growth: oldPrice ? (oldPrice > price ? 'down' : 'up') : null,\n              },\n            },\n          });\n        });\n      });\n    } catch (err) {\n      console.error('Error', err);\n      this.setState({ error: ERROR_MESSAGE });\n    }\n  };\n\n  render() {\n    const { liveStocks = {}, error, activeStock } = this.state || {};\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Live Stocks App</h1>\n        </header>\n        <main>\n          <TickerTable\n            data={liveStocks}\n            error={error}\n            onStockClick={this.showChart}\n          />\n          {activeStock && (\n            <StockChart\n              values={this.data[activeStock]}\n              stockName={activeStock}\n              onClose={this.closeChart}\n            />\n          )}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}