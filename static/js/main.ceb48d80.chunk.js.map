{"version":3,"sources":["constants.js","components/TickerTable.js","utils.js","App.js","index.js"],"names":["STOCKS_WS_URL","TickerTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initWebSocket","window","socket","WebSocket","addEventListener","event","send","setState","error","concat","target","url","JSON","parse","data","forEach","_data","slicedToArray","name","price","toFixed","oldPrice","state","defineProperty","updatedAt","Date","now","growth","_this2","react_default","a","createElement","className","keys","length","map","_this2$state$name","key","timestamp","date","seconds","Math","floor","interval","timeSince","Component","App","components_TickerTable","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ceb48d80.chunk.js","sourcesContent":["export const STOCKS_WS_URL = 'ws://stocks.mnet.website';\n","import React, { Component } from 'react';\nimport { STOCKS_WS_URL } from '../constants';\nimport { timeSince } from '../utils';\n\nclass TickerTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.initWebSocket();\n  }\n\n  initWebSocket = () => {\n    if (!('WebSocket' in window)) return;\n\n    const socket = new WebSocket(STOCKS_WS_URL);\n    // Connection opened\n    socket.addEventListener('open', event => {\n      socket.send('Hello Server!');\n    });\n\n    // Handle socket connection error\n    socket.addEventListener('error', event => {\n      this.setState({ error: `Failed to connect \"${event.target.url}\".` });\n    });\n\n    // Listen for messages\n    socket.addEventListener('message', event => {\n      // console.log('Message from server ', event.data);\n      JSON.parse(event.data).forEach(data => {\n        let [name, price] = data;\n        price = price.toFixed(2);\n        const { price: oldPrice } = this.state[name] || {};\n\n        this.setState({\n          [name]: {\n            price: +price,\n            updatedAt: Date.now(),\n            growth: oldPrice ? (oldPrice > price ? 'down' : 'up') : null,\n          },\n        });\n      });\n    });\n  };\n\n  render() {\n    const { error } = this.state;\n    // Show error message when connection fails.\n    if (error) return <div className=\"error\">{error}</div>;\n\n    // Don't show anything till first message is received.\n    if (Object.keys(this.state).length === 0) return null;\n\n    return (\n      <table className=\"ticker-table-wrapper\">\n        <thead>\n          <tr>\n            <th className=\"name\">Ticker</th>\n            <th className=\"price\">Price</th>\n            <th className=\"time\">Last Updated</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(this.state).map(name => {\n            const { price, updatedAt, growth } = this.state[name];\n            return (\n              <tr className={growth ? '' : 'new'} key={name}>\n                <td className=\"name\">{name}</td>\n                <td className={`price ${growth || ''}`}>{price}</td>\n                <td className=\"time\">{timeSince(updatedAt)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nTickerTable.propTypes = {};\n\nexport default TickerTable;\n","export const timeSince = timestamp => {\n  const date = new Date(timestamp);\n  const seconds = Math.floor((new Date() - date) / 1000);\n\n  var interval = Math.floor(seconds / 31536000); // Interval in years\n  if (interval > 1) {\n    return '19 Dec 2019 12:30 PM';\n  }\n\n  interval = Math.floor(seconds / 86400); // Interval in days\n  if (interval > 2) {\n    return '19 Dec 12:30 PM';\n  }\n  if (interval > 1) {\n    return 'Yesterday 12:30 PM';\n  }\n\n  // interval = Math.floor(seconds / 3600); // Interval in hours\n  // if (interval > 1) {\n  //   return interval + \" hours\";\n  // }\n  \n  interval = Math.floor(seconds / 60); // Interval in minutes\n  if (interval > 30) {\n    return '12:30 PM';\n  }\n  if (interval > 1) {\n    return interval + ' minutes ago';\n  }\n  if (seconds > 5) {\n    return seconds + ' seconds ago';\n  }\n  if (seconds > 1) {\n    return 'a few seconds ago';\n  }\n  return 'now';\n}","import React from 'react';\nimport TickerTable from './components/TickerTable';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Ticker App</h1>\n      </header>\n      <main>\n        <TickerTable />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}